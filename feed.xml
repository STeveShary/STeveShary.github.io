<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">STeve Smash Code</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="/feed.xml" />
<link rel="alternate" type="text/html" href="" />
<updated>2016-01-31T13:46:28-05:00</updated>
<id>/</id>
<author>
  <name>Stephen Shary</name>
  <uri>/</uri>
  <email>stephen.shary@gmail.com`</email>
</author>


<entry>
  <title type="html"><![CDATA[Why choose that framework?  It's testability]]></title>
 <link rel="alternate" type="text/html" href="/testing/Choose-Testable-Frameworks/" />
  <id>/testing/Choose-Testable-Frameworks</id>
  <updated>2016-01-31T00:00:00-00:00</updated>
  <published>2016-01-31T00:00:00-05:00</published>
  
  <author>
    <name>Stephen Shary</name>
    <uri></uri>
    <email>stephen.shary@gmail.com`</email>
  </author>
  <content type="html">
    &lt;h2 id=&quot;frameworks-the-cause-of-and-solution-to-all-your-problems&quot;&gt;Frameworks: The cause of and solution to all your problems.&lt;/h2&gt;

&lt;p&gt;When new frameworks come out, people can really jump on the “kool-aid” train.  I have had many
developers and managers tout the greatness of a new framework.  It’s solves many of our problems!
It’s super simple!  It’s really fast!  Look at how beautiful and clean the code is! OMG I’M GOING TO CRY IS IS SO AWESOME!&lt;/p&gt;

&lt;p&gt;I don’t want to get down on passionate programmers.  I’ll take a passionate person over a non-plussed developer any day.  Besides, all developers work in imperfect environments.  We also tend to be very particular about development.  When we work on a problem and there is no “thing” to truly complete it well, we typically have to work with little imperfections that bother us.  After months or even years of work it’s a total relief to find an “amazing” framework that does “scratch that itch.”  It’s a joyous moment in our technical, nuanced world.&lt;/p&gt;

&lt;p&gt;So this new framework is shared with other developers.  And they didn’t feel the pain with the current implementation.  They don’t feel the need to abandon with no regard to this new panacea.  And then when they see the syntax of the new “thing”, it doesn’t look so nice.  In fact, it looks rather bothersome the way that they pass the state over to computation thing.&lt;/p&gt;

&lt;p&gt;The better that a framework is, the more that it typically does.  Most frameworks allow us to remove all of the boilerplate code and get down the the unique part of your project.  And the more that it does, the less you really know what it is doing.  But that’s ok!  This thing is AMAZING!&lt;/p&gt;

&lt;h3 id=&quot;why-testing-here-matters&quot;&gt;Why testing here matters&lt;/h3&gt;

&lt;p&gt;Testing a framework is important because we are going to need to use it.  Plus since it is so awesome, it is going to be the underlying part of what we do.  Maybe your business is selling shower curtain rings.  Now you want to do it online and this “Ruby on Rails” framework is going to allow you to do it.  The rails framework is going to underpin everything.  Sooo… it should work properly.&lt;/p&gt;

&lt;p&gt;The second you start working with a framework, you are doing integration coding.  Your unit tests will become less and less useful.  You will find yourself mocking everything.  You might try to create the thinnest possible integration layer.  Maybe you even venture into the black magic of partial mocks.  Any way you slice it, you have a little code sitting on a small mountain of someone else’s work.&lt;/p&gt;

&lt;p&gt;The ideal situation is a framework that shows you how to write integration tests.  You need to be able to quickly setup a portion of the framework with your extensions and verify the output.  Ideally, this starts up quickly ( &amp;lt; 100ms ) and gives you the verification that that your use of the system provides the expected output.&lt;/p&gt;

&lt;p&gt;I’ll give you an example.  In the Java world, there are two popular web MVC frameworks: SpringMVC and Jersey.  These two frameworks solve the problem of handling REST calls.  They allow your map rest calls to a function and translate the outputs to a web format (JSON/HTML…).   I’m not going to go into the merits of either except for testing.  Here is the code below for a test that accepts a GET call for a user and returns a user JSON object (translated from a POJO).&lt;/p&gt;

&lt;p&gt;The Jersey implementation:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SimpleResource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@GET&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/get/things&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Produces&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TEXT_PLAIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getThings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;resource response&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The SpringMVC implementation:&lt;/p&gt;

&lt;p&gt;public class SimpleController {&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;  &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/get/things&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;produces&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TEXT_PLAIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@ResponseBody&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getThings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;controller response&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Both are fairly similar.  Not too bad.  Now let’s look at the tests.&lt;/p&gt;

&lt;p&gt;The Jersey Test:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SimpleTest&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JerseyTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResourceConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SimpleResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/get/things&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;resource response&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The SpringMVC Test:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SimpleControllerTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;simple&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;standaloneSetup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockedService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/get/things&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TEXT_PLAIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isOk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/plain&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;controller response&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Both testing frameworks will allow you to build a very detailed request that is sent into the application using REST.  We can set the HTTP method, the path, and headers.&lt;/p&gt;

&lt;p&gt;The difference between these two examples is that SpringMVC has created an entire framework that will inspect the response.  The Jersey testing framework will allow you to get the response body.  The interesting part about the Jersey testing framework is that it was really created just to test the framework internally:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Jersey Test Framework originated as an internal tool used for verifying the correct implementation of server-side components&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What we lack here that is possible with the SpringMVC framework is the full ability to assert the response.  It’s also interesting that the top stack overflow question: “&lt;a href=&quot;http://stackoverflow.com/questions/21413738/unit-testing-jersey-restful-services&quot;&gt;Unit testing jersey Restful Services&lt;/a&gt;” has the top answer being to use RestAssured (A generic API testing framework).  Jersey isn’t a bad project.  It’s really nice and very fast.  My concern is that I am limited in verifying how it will work using fast integration tests.&lt;/p&gt;

&lt;h2 id=&quot;ok-so-who-cares--its-just-testing&quot;&gt;Ok…. So Who Cares!?!  It’s Just testing!&lt;/h2&gt;

&lt;p&gt;Automated testing is important.  If don’t agree or hesitate to agree, then I’ve already lost my case.  When I have brought in a new framework, I have three options when using it:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Let’s verify how it works through integration testing.&lt;/li&gt;
  &lt;li&gt;Let’s open up the source code and read through it.&lt;/li&gt;
  &lt;li&gt;Let’s tell ourselves after it’s in production: “Other people use it”, “It seemed fine.”, “That’s what we pay our QA folks for.”, “I saw it on [hacker news]/[Some conference]/[youtube] and it should work fine.”&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I think option one is the best.  It provides a safety net for upgrades, understanding the framework (and your code).  It safely allows other people to transition onto your team and guides them in how the application works without weeks/months/years of understanding.&lt;/p&gt;

&lt;p&gt;Option two is valiant but many times you want the framework to solve a boilerplate or difficult problem for you.  So the thought of understanding how this framework handles connection pooling or SSL or whatever gets you confused.  If you are lucky enough to have a core contributor to the project on your team then that is great, but &lt;a href=&quot;http://modeling-languages.com/whats-bus-factor-software-project/&quot;&gt;your bus factor is 1&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The last option is dumb.  I’m not gonna sugar-coat this bad boy.  The probability of failure goes up and what’s worse is that you will find it late in your project.  I don’t ever want to work on a project that doesn’t have tests.  I’m not a QA nut, I just don’t want to do support!&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/testing/Choose-Testable-Frameworks/&quot;&gt;Why choose that framework?  It&#39;s testability&lt;/a&gt; was originally published by Stephen Shary at &lt;a href=&quot;&quot;&gt;STeve Smash Code&lt;/a&gt; on January 31, 2016.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[How to Setup Elastic Search in Docker Containers]]></title>
 <link rel="alternate" type="text/html" href="/devops/Elastic-Search-in-Docker/" />
  <id>/devops/Elastic-Search-in-Docker</id>
  <updated>2016-01-18T00:00:00-00:00</updated>
  <published>2016-01-18T00:00:00-05:00</published>
  
  <author>
    <name>Stephen Shary</name>
    <uri></uri>
    <email>stephen.shary@gmail.com`</email>
  </author>
  <content type="html">
    &lt;h2 id=&quot;elastic-search-and-docker&quot;&gt;Elastic Search and Docker&lt;/h2&gt;

&lt;p&gt;Elastic Search is great!  Docker is great!  Let’s use both of them together!  Ok, seriously.  I am working on project that is using a fairly large Elastic Search (ES) cluster.  More than just a toy example.  So we have nodes that run on different machines in different racks and in different datacenters.  So the examples (&lt;a href=&quot;http://elk-docker.readthedocs.org/#elasticsearch-cluster-different-hosts&quot;&gt;here&lt;/a&gt;, &lt;a href=&quot;https://clusterhq.com/2014/10/14/deploying-multi-node-elasticsearch-logstash-kibana-cluster-using-docker/&quot;&gt;here&lt;/a&gt;, &lt;a href=&quot;https://github.com/deviantony/docker-elk&quot;&gt;here&lt;/a&gt;, and &lt;a href=&quot;http://technologyconversations.com/2015/05/18/centralized-system-and-docker-logging-with-elk-stack/&quot;&gt;here&lt;/a&gt;) talk about some really great stuff but I couldn’t get them to really work with separate ES nodes. Maybe too, you are running in the cloud and have &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/plugins/2.1/discovery.html&quot;&gt;a nice plugin to use for your cloud provider&lt;/a&gt;.  Ok, I don’t have that.&lt;/p&gt;

&lt;h4 id=&quot;the-problem&quot;&gt;The problem.&lt;/h4&gt;

&lt;p&gt;Well, it lies in the fact that docker networking hides the containers from the networking stack on the host machine.  The problem is that when you start elastic search, you have to host addresses:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The bind host&lt;/li&gt;
  &lt;li&gt;The publish host&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The bind host is where we declare where we want the process to serve from.   This allows us to define which network interface(s) we want to use.  It is the basic requirement for a server process to listen to tcp traffic.&lt;/p&gt;

&lt;p&gt;The publish host is like the “return address”.  When we use the zen discovery with ES, we have to tell the other nodes how to talk to our node.  They have important things to tell us and two-way communication is good.&lt;/p&gt;

&lt;p&gt;The problem that arrises is that most of the documentation points to this nice parameter &lt;code class=&quot;highlighter-rouge&quot;&gt;network.host&lt;/code&gt; (&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/2.x/modules-network.html&quot;&gt;yep, the first parameter in the network documentation&lt;/a&gt;).  The “cool” (or not) feature of this parameter is that it will set both the bind and publish host for you (&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/2.x/modules-network.html&quot;&gt;source&lt;/a&gt;)  And it has an even nicer thing where you can set it to &lt;code class=&quot;highlighter-rouge&quot;&gt;0.0.0.0&lt;/code&gt; which tells ES, “hey, choose a non-loop back interface and just use that!”   This shows up in the &lt;a href=&quot;https://github.com/docker-library/elasticsearch/blob/a3f8e658da60bf58e97e18a78d85815a896f9eed/2.1/config/elasticsearch.yml&quot;&gt;configuration for the official ES docker container!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thhe problem hits us when we realize that the IP address in the docker container is not the same IP address that other processes outside of the server can see.  Now, there is the GIANT HAMMER solve this.
You can add the parameter &lt;code class=&quot;highlighter-rouge&quot;&gt;--net=&quot;host&quot;&lt;/code&gt;  to your docker run command, but that is generally a bad idea (see &lt;a href=&quot;http://www.dasblinkenlichten.com/docker-networking-101-host-mode/&quot;&gt;here&lt;/a&gt;, and &lt;a href=&quot;https://github.com/jedisct1/dnscrypt-server-docker/issues/13&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;So it took me some time to realize that I want to set my bind host to the “fancy pants” &lt;code class=&quot;highlighter-rouge&quot;&gt;0.0.0.0&lt;/code&gt; and then set my publish host to the hostname of the host (or the IP address of my host). Since my docker container doesn’t know much of anything about the host, I have to tell it what is the external host.  I do this as part of my docker run command; I add an environment variable &lt;code class=&quot;highlighter-rouge&quot;&gt;--env &quot;PUBLISH_IP=10.0.0.1&quot;&lt;/code&gt;.  Then in my elasticsearch.yml, you have to set the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;s&quot;&gt;network.bind_host&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.0.0.0&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;network.publish_host&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${PUBLISH_IP}&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Adding these two lines will allow you to have your ES containers talk to each other properly.  Man, it feels kinda anticlimatic to have a solution that is so small.&lt;/p&gt;

&lt;p&gt;Nothing big, but I hope you found this before too much hassle.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/devops/Elastic-Search-in-Docker/&quot;&gt;How to Setup Elastic Search in Docker Containers&lt;/a&gt; was originally published by Stephen Shary at &lt;a href=&quot;&quot;&gt;STeve Smash Code&lt;/a&gt; on January 18, 2016.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[The Solution to the Temptation of End-To-End Tests: Integration Testing]]></title>
 <link rel="alternate" type="text/html" href="/testing/end-to-end-testing-problem/" />
  <id>/testing/end-to-end-testing-problem</id>
  <updated>2016-01-03T00:00:00-00:00</updated>
  <published>2016-01-03T00:00:00-05:00</published>
  
  <author>
    <name>Stephen Shary</name>
    <uri></uri>
    <email>stephen.shary@gmail.com`</email>
  </author>
  <content type="html">
    &lt;p&gt;The moment that you QA group figures out how to write end-to-end tests or the moment that you boss watches a selenium test, a new fever hits your team to write a test as solution to every problem.  Button the wrong color?  Write a test.  Customer got a 404?  Write a test.  Need to support IE 8?  Write a test.&lt;/p&gt;

&lt;p&gt;Next thing you know your team has hundreds of tests that do bunches of things.  You also need a small super-computer cluster to run them as well.&lt;/p&gt;

&lt;p&gt;The problem is that these end-to-end tests have serious inherent problems. Those problems with end-to-end tests are stability and speed.&lt;/p&gt;

&lt;p&gt;Luckily, there is a solution.  Let’s define the two problems first.&lt;/p&gt;

&lt;h2 id=&quot;lack-of-test-stability-is-a-loss-of-test-confidence&quot;&gt;Lack of Test Stability is a Loss of Test Confidence&lt;/h2&gt;

&lt;p&gt;Let’s talk about stability first.  I have worked on a number of projects where there is an automation test suite.  We have our unit, integration, and end-to-end test tests.  We usually have a continuous integration (CI) pipeline that will execute our tests on each check in.  Things are great for the first couple of weeks.  All steps are green and then after that we move to this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/pile-up.jpg&quot; alt=&quot;Toy Car pile-up&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And the failed builds are painful.  Everything goes red and stop looking at the build.  Then your team doesn’t care.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://s2.quickmeme.com/img/cb/cbcdef26ba7abde1ff4757fec30671b923775265466a623f022efc83c2310446.jpg&quot; alt=&quot;Roses are red, violets are red, everything is red&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then you start hearing these conversations:&lt;/p&gt;

&lt;iframe width=&quot;420&quot; height=&quot;200&quot; class=&quot;center-image&quot; src=&quot;https://www.youtube.com/embed/pKTgCZyBY4E&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;The thing is though is that we still care about the first tests: unit.  Why is that?  Well because they are stable.  We make git hooks that prevent people from pushing code to a broken build but our integration and end-to-end tests are still a total blood-bath.  Below is a graph the depicts the stability of tests along with team confidence.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/testing-stability-graph.png&quot; alt=&quot;Graph of Test Stability and Team Confidence along with Number of Tests&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One thing to think about.  If your test environment works 99% of the time and you have 200+ tests, then you are statistically going to fail almost every build.  The law of averages is &lt;em&gt;NOT&lt;/em&gt; on your side.  Even if you get a good build, how often will that happen?&lt;/p&gt;

&lt;h4 id=&quot;solutions-to-complexity&quot;&gt;Solutions to Complexity&lt;/h4&gt;

&lt;p&gt;First thought: Keep it simple.  That seems to be like a obvious solution but try to get your team to focus on integrating the pieces that have the most complex interaction.  If two parts connect in one way, then how much benefit do you get putting them together.  If you have two units that interact back and forth, then integrate those together.  More is not always better.&lt;/p&gt;

&lt;p&gt;Second thought: Write a stub for the flakiest part of the system.  Do you rely on that third-party processor and it works 80% of the time?   Rip out the actual interaction into a stub!  It may take a little time but it will make your tests reliable.&lt;/p&gt;

&lt;p&gt;A real-world example:  I was working on a project where we have a complex front-end web application and then a complex back-end that makes calls to multiple services.  Past projects that were somewhat similar had always run into problems with the end-to-end tests where the back-end server would 500 or timeout (always randomly) and the tests would break.  So we used &lt;a href=&quot;http://sinonjs.org/&quot;&gt;sinon.js&lt;/a&gt; to fake XMLHttpRequests.  You know what?  That works 100% of the time.  No weird delays, unexpected responses.  The stubbing framework was &amp;lt; 200 lines of code and it opened us to up to write several tests on failure scenarios that are very, very difficult to recreate in a true end-to-end test.&lt;/p&gt;

&lt;h2 id=&quot;lack-of-test-performance--i-dont-run-those&quot;&gt;Lack of Test Performance = “I don’t run those”&lt;/h2&gt;

&lt;p&gt;Developers are impatient.  They are also easily distracted when they have to do something they don’t want to do.  So when you have tests that don’t run quickly, then people don’t run them.  One solution that I hear about the “nightly build”.  I have never worked on a team that had this, but the problem is that you delay feedback to developers.   Why!?!  I want to know as quickly as possible that I broke something.  First, I don’t want the shame of make a code change that breaks 500+ tests and then have to do the revert of shame.&lt;/p&gt;

&lt;p&gt;Plus if you have the central authority run the tests, then your commit messages would look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://imgs.xkcd.com/comics/git_commit.png&quot; alt=&quot;xkcd comit about git commit messages&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;so-how-do-you-make-your-tests-run-faster&quot;&gt;So how do you make your tests run faster?&lt;/h3&gt;

&lt;p&gt;Well, there are a couple of things that can be done:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Choose frameworks that are made to be tested.&lt;/li&gt;
  &lt;li&gt;Break your large number of end-to-end tests down into integration tests.&lt;/li&gt;
  &lt;li&gt;If a framework has a long setup time, re-use your setup as much as possible.&lt;/li&gt;
  &lt;li&gt;Run your tests in parallel.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;integration-testing&quot;&gt;Integration Testing&lt;/h2&gt;

&lt;p&gt;Integration tests are interesting because we put together two or more units and verify that their effect and response is correct.  An integration test may have more than one side-effect.  If you have a user creation controller and a user service, when we test user creation, we send back to the user what their user name is with the controller but we will also verify that the service persists the user details.&lt;/p&gt;

&lt;p&gt;Not everything can be integrated and tested.  Look for frameworks that let you do this.  I like AngularJS with their directives and new component architecture.  I also love Spring.  You can wire up all sorts of &lt;a href=&quot;http://docs.spring.io/spring/docs/current/spring-framework-reference/html/integration-testing.html&quot;&gt;crazy configurations that let you test the interaction of beans.&lt;/a&gt;  Databases now have &lt;a href=&quot;http://dbunit.sourceforge.net/&quot;&gt;DbUnit&lt;/a&gt; and Cassandra has &lt;a href=&quot;https://github.com/jsevellec/cassandra-unit&quot;&gt;CassandraUnit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Integration tests are very unassuming.  They seem like they are more complicated versions of unit tests.  Plus, they don’t test the application end-to-end!   But, they are fast and stable.  When I say fast, I think less than 100ms.  An integration tests mocks out the dependencies on the end.  This allows the points of instability to become very very stable.&lt;/p&gt;

&lt;p&gt;Lastly, integration tests let you build interesting scenarios.  Are you worried about a race condition?  You can build artificial dependencies that get injected into your integration test to verify how your system will perform.  Want to know what happens when the system throws an exception on adding and item to the basket?  No problem.  Want to make sure that your message processor handles a rare out-of-order scenario?  Not difficult.&lt;/p&gt;

&lt;p&gt;It’s not the silver bullet, but when used with some end-to-end tests and a bedrock of unit tests; it helps tremendously.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/testing/end-to-end-testing-problem/&quot;&gt;The Solution to the Temptation of End-To-End Tests: Integration Testing&lt;/a&gt; was originally published by Stephen Shary at &lt;a href=&quot;&quot;&gt;STeve Smash Code&lt;/a&gt; on January 03, 2016.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Customize Gradle to setup Intellij]]></title>
 <link rel="alternate" type="text/html" href="/developer%20setup/Gradle-Intellij-Setup/" />
  <id>/developer%20setup/Gradle-Intellij-Setup</id>
  <updated>2015-12-24T00:00:00-00:00</updated>
  <published>2015-12-24T00:00:00-05:00</published>
  
  <author>
    <name>Stephen Shary</name>
    <uri></uri>
    <email>stephen.shary@gmail.com`</email>
  </author>
  <content type="html">
    &lt;h2 id=&quot;automating-efficiency&quot;&gt;Automating Efficiency&lt;/h2&gt;

&lt;p&gt;Setting up Intellij isn’t hard.  Getting everyone on your team to do it is another thing.  Getting it right so developers are efficient is no small matter.  The little extra integration and goodness can really let people fly.  Configured Intellij environments allow developers to get near real-time feedback on their work.  Lisa Crispin talks about this in her blog about continuous integration and farming with donkeys:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If we have a continuous integration process that runs our regression tests on each new version of the code, we know within a few minutes or hours whether new or updated code has broken something. When we know right away, it’s easy to fix. Problems don’t worry us, because we know we can fix them in a timely manner and move on.
Short feedback loops give us confidence. Confidence leads to enjoyment.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;http://lisacrispin.com/2011/03/20/shortening-the-feedback-loop/&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While Lisa talks about minutes and hours, I think we should be thinking now in milliseconds and seconds for a feedback loop.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-the-intellij-project&quot;&gt;Setting up the Intellij Project&lt;/h2&gt;

&lt;p&gt;Let’s start with the project.  Gradle has documentation &lt;a href=&quot;https://docs.gradle.org/current/dsl/org.gradle.plugins.ide.idea.model.IdeaProject.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Below is an example idea configuration used in my base &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; file in the project.  I’ll go into detail on what each of the different sections mean.&lt;/p&gt;

&lt;p&gt;true&lt;script src=&quot;https://gist.github.com/9a2fa5246c3dfbf04943.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Looking at lines 7 and 8, there are two basic settings that can be set: the JDK level and the version control system.  These are basic options in the &lt;a href=&quot;https://docs.gradle.org/current/dsl/org.gradle.plugins.ide.idea.model.IdeaProject.html&quot;&gt;idea plugin Source&lt;/a&gt;  Being documented and pretty straight-forward, it’s not hard to understand what these do.  Let’s move the crazier part.&lt;/p&gt;

&lt;h4 id=&quot;setting-annotation-processing&quot;&gt;Setting Annotation Processing&lt;/h4&gt;

&lt;p&gt;Line 10 is interesting because here, we are going to modify the XML.  Intellij stores its project configuration in a .ipr file in the root project directory.  So line 10 says “let’s modify that .ipr file.”  The first block is where we find the node “CompilerConfiguration” and then modify the contents.  We have to think of in-place changes because we don’t know the original state of the ipr file.  So this block:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;          &lt;span class=&quot;c1&quot;&gt;// enable &#39;Annotation Processors&#39;&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;xmlFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;CompilerConfiguration&#39;&lt;/span&gt;
           &lt;span class=&quot;o&quot;&gt;}[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;annotationProcessing&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;replaceNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;annotationProcessing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                   &lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Default&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;useClasspath:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;true&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;enabled:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
               &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
           &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;will produce the XML snippet:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;project&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;4&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
 [...]
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;component&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;CompilerConfiguration&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;annotationProcessing&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;profile&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;default=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Default&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;enabled=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;processorPath&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;useClasspath=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/profile&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/annotationProcessing&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/component&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We put this specific change in to automatically turn on annotation processing in Intellij.  This allows the Lombok plugin to compile correctly in Intellij.  You might ask “&lt;a href=&quot;http://jnb.ociweb.com/jnb/jnbJan2010.html&quot;&gt;What’ lombok?&lt;/a&gt;”, well my friend, it makes POJOs into what I think that they should be.&lt;/p&gt;

&lt;h4 id=&quot;setting-git-vcs-root&quot;&gt;Setting Git VCS root&lt;/h4&gt;

&lt;p&gt;Intellij made this interesting “feature” where when it knows that you are using Git, it wants to know where the root of the repository is set so it can properly track changes.  In virtually every instance, it is the annoying popup in the top left where it asks you to set the VCS root.  Then when you open the dialog, it has everything set and all you have to hit is “ok”.  Well clicking buttons is annoying.  So lines 21 to 26 do this for us.  The gradle xml changes below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;      &lt;span class=&quot;c1&quot;&gt;// setup Git root&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;xmlFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;VcsDirectoryMappings&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;replaceNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;VcsDirectoryMappings&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;directory:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;vcs:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;directory:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;\$PROJECT_DIR\$&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;vcs:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Git&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;will produce the XML snippet:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;project&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;4&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

 [...]

   &lt;span class=&quot;nt&quot;&gt;&amp;lt;component&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;VcsDirectoryMappings&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;mapping&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;directory=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$PROJECT_DIR$&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;vcs=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Git&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/component&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Voilla!&lt;/p&gt;

&lt;h2 id=&quot;setting-up-the-intellij-module&quot;&gt;Setting up the Intellij Module&lt;/h2&gt;

&lt;p&gt;In Intellij, “A module is a discrete unit of functionality that can be run, tested, and debugged independently.” &lt;a href=&quot;http://www.jetbrains.org/intellij/sdk/docs/basics/project_structure.html&quot;&gt;Source&lt;/a&gt;.  Here, we are going to use the idea plugin to setup our spring inspection and Infinitest setup.&lt;/p&gt;

&lt;p&gt;As before, below is the gist of the project changes.  We’ll go into details about what each line is.&lt;/p&gt;

&lt;p&gt;true&lt;script src=&quot;https://gist.github.com/a163f485c86ff4452bf8.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;The first thing to note is that we are going to be modifying the ‘.iml’ file in the project.  This will allow us to modify which plugins will be active for the module.  The idea plugin will allow us to write to this with lines: 7.  The first thing that we do is get the “FacetManager” node.  This node allows us to set which plugins are active in the module.  Lines 10 through 17 are where we get the xml tag or build one.&lt;/p&gt;

&lt;p&gt;The code below gets the facet manager node and then if it finds it, removes the web facet from it.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Find or define the facetManager XML node.&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;facetManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xmlFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;FacetManager&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;facetManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webFacet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;facetManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;facet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;web&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;webFacet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;facetManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;webFacet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;facetManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xmlFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;appendNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;component&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;FacetManager&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next, in line 18 we are going to build our own elements so we can attach them.  Lines 20 through 28 build the nodes for spring inpsection.  Line 29 is where we attach that as a sub-element of the “FacetManager” element.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NodeBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Setup Spring Wiring inspection.&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;springFacet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;facet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;type:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Spring&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Spring&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fileset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;id:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;fileset&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Spring Application Context&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;nl&quot;&gt;removed:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;false&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;file://$MODULE_DIR$/src/[PATH TO SPRING BOOT APP]/[SPRING BOOT APP CLASS].java&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;facetManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;springFacet&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Lastly, still using the node build object, I build another xml element for Infinitest.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Setup Infinitest integration.&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;infinitestFacet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;facet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;type:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Infinitest&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Infinitest&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;facetManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;infinitestFacet&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Both of these produces the final output of:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;module&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;relativePaths=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;JAVA_MODULE&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;4&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;component&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;FacetManager&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;facet&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Spring&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Spring&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;fileset&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fileset&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Spring Application Context&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;removed=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;file&amp;gt;&lt;/span&gt;file://$MODULE_DIR$/src/[PATH TO SPRING BOOT APP]/[SPRING BOOT APP CLASS].java&lt;span class=&quot;nt&quot;&gt;&amp;lt;/file&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/fileset&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/facet&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;facet&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Infinitest&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Infinitest&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/facet&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/component&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/module&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;so-how-do-you-add-your-own-plugin-configurations&quot;&gt;So how do you add your own plugin configurations?&lt;/h4&gt;

&lt;p&gt;I do the following steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Make a copy of your iml or ipr file.&lt;/li&gt;
  &lt;li&gt;In Intellij, modify your settings to exactly what you want.&lt;/li&gt;
  &lt;li&gt;Diff the two and determine what XML elements need to be created.&lt;/li&gt;
  &lt;li&gt;Build the gradle configuration until you get exactly what you want.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;lastly-is-it-worth-the-work&quot;&gt;Lastly: &lt;em&gt;Is it worth the work?&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;If it’s just you, maybe not.  I tend to work with teams of 3 - 15 developers.  A good chunk of them are really great developers and many of them can get stuck trying to get things setup.  Most developers are lazy &lt;a href=&quot;http://c2.com/cgi/wiki?ProgrammingPerl&quot;&gt;(which isn’t always thought of as a bad thing)&lt;/a&gt; and so making things work “auto-magically” will result in the highest rate of adoption and the lowest rate of grumbling.&lt;/p&gt;

&lt;p&gt;I am always open to hear your thoughts though…&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/developer%20setup/Gradle-Intellij-Setup/&quot;&gt;Customize Gradle to setup Intellij&lt;/a&gt; was originally published by Stephen Shary at &lt;a href=&quot;&quot;&gt;STeve Smash Code&lt;/a&gt; on December 24, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Intellij and Gradle Setup and Integration]]></title>
 <link rel="alternate" type="text/html" href="/developer%20setup/Gradle-Intellij/" />
  <id>/developer%20setup/Gradle-Intellij</id>
  <updated>2015-12-23T00:00:00-00:00</updated>
  <published>2015-12-22T00:00:00-05:00</published>
  
  <author>
    <name>Stephen Shary</name>
    <uri></uri>
    <email>stephen.shary@gmail.com`</email>
  </author>
  <content type="html">
    &lt;p&gt;There are two main ways to setup your project in Intellij when using gradle as your build tool for a java project:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Import your gradle project using Intellij.&lt;/li&gt;
  &lt;li&gt;Build your Intellij project using the Gradle idea plugin&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here, I’ll discuss the three approaches and the pros and cons.  The end will talk about I do in the projects that I work on.&lt;/p&gt;

&lt;h2 id=&quot;import-your-gradle-project-using-intellij&quot;&gt;Import your Gradle project Using Intellij&lt;/h2&gt;

&lt;p&gt;Intellij has two big nice features:  “ability to import projects from the existing Gradle models. So doing, IntelliJ IDEA downloads all the necessary dependencies” and “ability to synchronize structures of Gradle and IntelliJ IDEA projects.”  In practice, this is where you open a project by selecting the “build.gradle” file in your project and the Intellij wizard(ry) does the rest.&lt;/p&gt;

&lt;p&gt;Pros:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Very simple.&lt;/li&gt;
  &lt;li&gt;Changes are synchronized.  As you change your &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; file, Intellij will automatically pull the dependency down and add it to your build path.  Make sure that you select the check box as seen below for this feature.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;images/gradle-import.png&quot; alt=&quot;Gradle import window in Intellij&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Cons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Intellij doesn’t import all of your settings.  Specifically, if there are plugin configurations for your project that you use with your &lt;a href=&quot;https://docs.gradle.org/current/userguide/idea_plugin.html&quot;&gt;idea plugin settings&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt;  JetBrains recommends that if you want to share your project settings on your team, that you should “.idea project configuration directory should be shared via version control.” &lt;a href=&quot;https://www.jetbrains.com/idea/help/synchronizing-and-sharing-settings.html#d1421736e270&quot;&gt;Source&lt;/a&gt; &lt;a href=&quot;https://intellij-support.jetbrains.com/hc/en-us/articles/206827587-How-to-manage-projects-under-Version-Control-Systems&quot;&gt;and here&lt;/a&gt; but it contains a number of “guidelines” of things that you should not include because they “contain keystore passwords”, “conflicts if another developer has the same name”.  I have also found when a project has these files checked in ( incorrectly albeit ), that every commit will inevitably contain some .iws change.&lt;/p&gt;

&lt;h2 id=&quot;build-your-intellij-project-using-the-gradle-idea-plugin&quot;&gt;Build your Intellij project using the Gradle idea plugin&lt;/h2&gt;

&lt;p&gt;Gradle has an &lt;em&gt;idea&lt;/em&gt; plugin that allows you to build your Intellij project files.  You just need to include the line:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;idea&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and when you run the command &lt;code class=&quot;highlighter-rouge&quot;&gt;gradlew idea&lt;/code&gt; it will download your dependencies and setup your project.&lt;/p&gt;

&lt;p&gt;Pros:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Very simple to setup dependencies.&lt;/li&gt;
  &lt;li&gt;You can customize project settings including your Version Control, JDK Version, and other plugin settings.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Changes are not automatically synchronized.  You need to run &lt;code class=&quot;highlighter-rouge&quot;&gt;gradlew idea&lt;/code&gt; to rebuild your dependencies.&lt;/li&gt;
  &lt;li&gt;Making custom changes are not simple.  Most of them involve XML manipulation using groovy.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;so-what-did-i-choose&quot;&gt;So What Did I Choose?&lt;/h2&gt;

&lt;p&gt;I chose to use the second option.  I found that even if the setup is harder, it’s worth it to automatically configure more parts of the development environment.  We have strong developers that spend the time to get their environment just right.  But, there are equally more people that will work with less optimal systems because they are unsure how to get it working.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/developer%20setup/Gradle-Intellij/&quot;&gt;Intellij and Gradle Setup and Integration&lt;/a&gt; was originally published by Stephen Shary at &lt;a href=&quot;&quot;&gt;STeve Smash Code&lt;/a&gt; on December 22, 2015.&lt;/p&gt;
  </content>
</entry>

</feed>
