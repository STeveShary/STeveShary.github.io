<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">STeve Smash Code</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="/feed.xml" />
<link rel="alternate" type="text/html" href="" />
<updated>2016-01-10T11:02:17-05:00</updated>
<id>/</id>
<author>
  <name>Stephen Shary</name>
  <uri>/</uri>
  <email>stephen.shary@gmail.com`</email>
</author>


<entry>
  <title type="html"><![CDATA[The Solution to the Temptation of End-To-End Tests: Integration Testing]]></title>
 <link rel="alternate" type="text/html" href="/testing/end-to-end-testing-problem/" />
  <id>/testing/end-to-end-testing-problem</id>
  <updated>2016-01-03T00:00:00-00:00</updated>
  <published>2016-01-03T00:00:00-05:00</published>
  
  <author>
    <name>Stephen Shary</name>
    <uri></uri>
    <email>stephen.shary@gmail.com`</email>
  </author>
  <content type="html">
    &lt;p&gt;The moment that you QA group figures out how to write end-to-end tests or the moment that you boss watches a selenium test, a new fever hits your team to write a test as solution to every problem.  Button the wrong color?  Write a test.  Customer got a 404?  Write a test.  Need to support IE 8?  Write a test.&lt;/p&gt;

&lt;p&gt;Next thing you know your team has hundreds of tests that do bunches of things.  You also need a small super-computer cluster to run them as well.&lt;/p&gt;

&lt;p&gt;The problem is that these end-to-end tests have serious inherent problems. Those problems with end-to-end tests are stability and speed.&lt;/p&gt;

&lt;p&gt;Luckily, there is a solution.  Let’s define the two problems first.&lt;/p&gt;

&lt;h2 id=&quot;lack-of-test-stability-is-a-loss-of-test-confidence&quot;&gt;Lack of Test Stability is a Loss of Test Confidence&lt;/h2&gt;

&lt;p&gt;Let’s talk about stability first.  I have worked on a number of projects where there is an automation test suite.  We have our unit, integration, and end-to-end test tests.  We usually have a continuous integration (CI) pipeline that will execute our tests on each check in.  Things are great for the first couple of weeks.  All steps are green and then after that we move to this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/pile-up.jpg&quot; alt=&quot;Toy Car pile-up&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And the failed builds are painful.  Everything goes red and stop looking at the build.  Then your team doesn’t care.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://s2.quickmeme.com/img/cb/cbcdef26ba7abde1ff4757fec30671b923775265466a623f022efc83c2310446.jpg&quot; alt=&quot;Roses are red, violets are red, everything is red&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then you start hearing these conversations:&lt;/p&gt;

&lt;iframe width=&quot;420&quot; height=&quot;200&quot; class=&quot;center-image&quot; src=&quot;https://www.youtube.com/embed/pKTgCZyBY4E&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;The thing is though is that we still care about the first tests: unit.  Why is that?  Well because they are stable.  We make git hooks that prevent people from pushing code to a broken build but our integration and end-to-end tests are still a total blood-bath.  Below is a graph the depicts the stability of tests along with team confidence.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/testing-stability-graph.png&quot; alt=&quot;Graph of Test Stability and Team Confidence along with Number of Tests&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One thing to think about.  If your test environment works 99% of the time and you have 200+ tests, then you are statistically going to fail almost every build.  The law of averages is &lt;em&gt;NOT&lt;/em&gt; on your side.  Even if you get a good build, how often will that happen?&lt;/p&gt;

&lt;h4 id=&quot;solutions-to-complexity&quot;&gt;Solutions to Complexity&lt;/h4&gt;

&lt;p&gt;First thought: Keep it simple.  That seems to be like a obvious solution but try to get your team to focus on integrating the pieces that have the most complex interaction.  If two parts connect in one way, then how much benefit do you get putting them together.  If you have two units that interact back and forth, then integrate those together.  More is not always better.&lt;/p&gt;

&lt;p&gt;Second thought: Write a stub for the flakiest part of the system.  Do you rely on that third-party processor and it works 80% of the time?   Rip out the actual interaction into a stub!  It may take a little time but it will make your tests reliable.&lt;/p&gt;

&lt;p&gt;A real-world example:  I was working on a project where we have a complex front-end web application and then a complex back-end that makes calls to multiple services.  Past projects that were somewhat similar had always run into problems with the end-to-end tests where the back-end server would 500 or timeout (always randomly) and the tests would break.  So we used &lt;a href=&quot;http://sinonjs.org/&quot;&gt;sinon.js&lt;/a&gt; to fake XMLHttpRequests.  You know what?  That works 100% of the time.  No weird delays, unexpected responses.  The stubbing framework was &amp;lt; 200 lines of code and it opened us to up to write several tests on failure scenarios that are very, very difficult to recreate in a true end-to-end test.&lt;/p&gt;

&lt;h2 id=&quot;lack-of-test-performance--i-dont-run-those&quot;&gt;Lack of Test Performance = “I don’t run those”&lt;/h2&gt;

&lt;p&gt;Developers are impatient.  They are also easily distracted when they have to do something they don’t want to do.  So when you have tests that don’t run quickly, then people don’t run them.  One solution that I hear about the “nightly build”.  I have never worked on a team that had this, but the problem is that you delay feedback to developers.   Why!?!  I want to know as quickly as possible that I broke something.  First, I don’t want the shame of make a code change that breaks 500+ tests and then have to do the revert of shame.&lt;/p&gt;

&lt;p&gt;Plus if you have the central authority run the tests, then your commit messages would look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://imgs.xkcd.com/comics/git_commit.png&quot; alt=&quot;xkcd comit about git commit messages&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;so-how-do-you-make-your-tests-run-faster&quot;&gt;So how do you make your tests run faster?&lt;/h3&gt;

&lt;p&gt;Well, there are a couple of things that can be done:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Choose frameworks that are made to be tested.&lt;/li&gt;
  &lt;li&gt;Break your large number of end-to-end tests down into integration tests.&lt;/li&gt;
  &lt;li&gt;If a framework has a long setup time, re-use your setup as much as possible.&lt;/li&gt;
  &lt;li&gt;Run your tests in parallel.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;integration-testing&quot;&gt;Integration Testing&lt;/h2&gt;

&lt;p&gt;Integration tests are interesting because we put together two or more units and verify that their effect and response is correct.  An integration test may have more than one side-effect.  If you have a user creation controller and a user service, when we test user creation, we send back to the user what their user name is with the controller but we will also verify that the service persists the user details.&lt;/p&gt;

&lt;p&gt;Not everything can be integrated and tested.  Look for frameworks that let you do this.  I like AngularJS with their directives and new component architecture.  I also love Spring.  You can wire up all sorts of &lt;a href=&quot;http://docs.spring.io/spring/docs/current/spring-framework-reference/html/integration-testing.html&quot;&gt;crazy configurations that let you test the interaction of beans.&lt;/a&gt;  Databases now have &lt;a href=&quot;http://dbunit.sourceforge.net/&quot;&gt;DbUnit&lt;/a&gt; and Cassandra has &lt;a href=&quot;https://github.com/jsevellec/cassandra-unit&quot;&gt;CassandraUnit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Integration tests are very unassuming.  They seem like they are more complicated versions of unit tests.  Plus, they don’t test the application end-to-end!   But, they are fast and stable.  When I say fast, I think less than 100ms.  An integration tests mocks out the dependencies on the end.  This allows the points of instability to become very very stable.&lt;/p&gt;

&lt;p&gt;Lastly, integration tests let you build interesting scenarios.  Are you worried about a race condition?  You can build artificial dependencies that get injected into your integration test to verify how your system will perform.  Want to know what happens when the system throws an exception on adding and item to the basket?  No problem.  Want to make sure that your message processor handles a rare out-of-order scenario?  Not difficult.&lt;/p&gt;

&lt;p&gt;It’s not the silver bullet, but when used with some end-to-end tests and a bedrock of unit tests; it helps tremendously.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/testing/end-to-end-testing-problem/&quot;&gt;The Solution to the Temptation of End-To-End Tests: Integration Testing&lt;/a&gt; was originally published by Stephen Shary at &lt;a href=&quot;&quot;&gt;STeve Smash Code&lt;/a&gt; on January 03, 2016.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Customize Gradle to setup Intellij]]></title>
 <link rel="alternate" type="text/html" href="/developer%20setup/Gradle-Intellij-Setup/" />
  <id>/developer%20setup/Gradle-Intellij-Setup</id>
  <updated>2015-12-24T00:00:00-00:00</updated>
  <published>2015-12-24T00:00:00-05:00</published>
  
  <author>
    <name>Stephen Shary</name>
    <uri></uri>
    <email>stephen.shary@gmail.com`</email>
  </author>
  <content type="html">
    &lt;h2 id=&quot;automating-efficiency&quot;&gt;Automating Efficiency&lt;/h2&gt;

&lt;p&gt;Setting up Intellij isn’t hard.  Getting everyone on your team to do it is another thing.  Getting it right so developers are efficient is no small matter.  The little extra integration and goodness can really let people fly.  Configured Intellij environments allow developers to get near real-time feedback on their work.  Lisa Crispin talks about this in her blog about continuous integration and farming with donkeys:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If we have a continuous integration process that runs our regression tests on each new version of the code, we know within a few minutes or hours whether new or updated code has broken something. When we know right away, it’s easy to fix. Problems don’t worry us, because we know we can fix them in a timely manner and move on.
Short feedback loops give us confidence. Confidence leads to enjoyment.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;http://lisacrispin.com/2011/03/20/shortening-the-feedback-loop/&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While Lisa talks about minutes and hours, I think we should be thinking now in milliseconds and seconds for a feedback loop.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-the-intellij-project&quot;&gt;Setting up the Intellij Project&lt;/h2&gt;

&lt;p&gt;Let’s start with the project.  Gradle has documentation &lt;a href=&quot;https://docs.gradle.org/current/dsl/org.gradle.plugins.ide.idea.model.IdeaProject.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Below is an example idea configuration used in my base &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; file in the project.  I’ll go into detail on what each of the different sections mean.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/9a2fa5246c3dfbf04943.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Looking at lines 7 and 8, there are two basic settings that can be set: the JDK level and the version control system.  These are basic options in the &lt;a href=&quot;https://docs.gradle.org/current/dsl/org.gradle.plugins.ide.idea.model.IdeaProject.html&quot;&gt;idea plugin Source&lt;/a&gt;  Being documented and pretty straight-forward, it’s not hard to understand what these do.  Let’s move the crazier part.&lt;/p&gt;

&lt;h4 id=&quot;setting-annotation-processing&quot;&gt;Setting Annotation Processing&lt;/h4&gt;

&lt;p&gt;Line 10 is interesting because here, we are going to modify the XML.  Intellij stores its project configuration in a .ipr file in the root project directory.  So line 10 says “let’s modify that .ipr file.”  The first block is where we find the node “CompilerConfiguration” and then modify the contents.  We have to think of in-place changes because we don’t know the original state of the ipr file.  So this block:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;          &lt;span class=&quot;c1&quot;&gt;// enable &#39;Annotation Processors&#39;&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;xmlFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;CompilerConfiguration&#39;&lt;/span&gt;
           &lt;span class=&quot;o&quot;&gt;}[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;annotationProcessing&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;replaceNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;annotationProcessing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                   &lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Default&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;useClasspath:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;true&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;enabled:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
               &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
           &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;will produce the XML snippet:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;project&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;4&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
 [...]
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;component&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;CompilerConfiguration&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;annotationProcessing&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;profile&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;default=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Default&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;enabled=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;processorPath&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;useClasspath=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/profile&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/annotationProcessing&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/component&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We put this specific change in to automatically turn on annotation processing in Intellij.  This allows the Lombok plugin to compile correctly in Intellij.  You might ask “&lt;a href=&quot;http://jnb.ociweb.com/jnb/jnbJan2010.html&quot;&gt;What’ lombok?&lt;/a&gt;”, well my friend, it makes POJOs into what I think that they should be.&lt;/p&gt;

&lt;h4 id=&quot;setting-git-vcs-root&quot;&gt;Setting Git VCS root&lt;/h4&gt;

&lt;p&gt;Intellij made this interesting “feature” where when it knows that you are using Git, it wants to know where the root of the repository is set so it can properly track changes.  In virtually every instance, it is the annoying popup in the top left where it asks you to set the VCS root.  Then when you open the dialog, it has everything set and all you have to hit is “ok”.  Well clicking buttons is annoying.  So lines 21 to 26 do this for us.  The gradle xml changes below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;      &lt;span class=&quot;c1&quot;&gt;// setup Git root&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;xmlFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;VcsDirectoryMappings&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;replaceNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;VcsDirectoryMappings&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;directory:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;vcs:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;directory:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;\$PROJECT_DIR\$&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;vcs:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Git&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;will produce the XML snippet:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;project&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;4&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

 [...]

   &lt;span class=&quot;nt&quot;&gt;&amp;lt;component&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;VcsDirectoryMappings&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;mapping&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;directory=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$PROJECT_DIR$&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;vcs=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Git&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/component&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Voilla!&lt;/p&gt;

&lt;h2 id=&quot;setting-up-the-intellij-module&quot;&gt;Setting up the Intellij Module&lt;/h2&gt;

&lt;p&gt;In Intellij, “A module is a discrete unit of functionality that can be run, tested, and debugged independently.” &lt;a href=&quot;http://www.jetbrains.org/intellij/sdk/docs/basics/project_structure.html&quot;&gt;Source&lt;/a&gt;.  Here, we are going to use the idea plugin to setup our spring inspection and Infinitest setup.&lt;/p&gt;

&lt;p&gt;As before, below is the gist of the project changes.  We’ll go into details about what each line is.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/a163f485c86ff4452bf8.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;The first thing to note is that we are going to be modifying the ‘.iml’ file in the project.  This will allow us to modify which plugins will be active for the module.  The idea plugin will allow us to write to this with lines: 7.  The first thing that we do is get the “FacetManager” node.  This node allows us to set which plugins are active in the module.  Lines 10 through 17 are where we get the xml tag or build one.&lt;/p&gt;

&lt;p&gt;The code below gets the facet manager node and then if it finds it, removes the web facet from it.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Find or define the facetManager XML node.&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;facetManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xmlFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;FacetManager&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;facetManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webFacet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;facetManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;facet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;web&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;webFacet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;facetManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;webFacet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;facetManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xmlFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;appendNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;component&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;FacetManager&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next, in line 18 we are going to build our own elements so we can attach them.  Lines 20 through 28 build the nodes for spring inpsection.  Line 29 is where we attach that as a sub-element of the “FacetManager” element.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NodeBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Setup Spring Wiring inspection.&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;springFacet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;facet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;type:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Spring&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Spring&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fileset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;id:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;fileset&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Spring Application Context&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;nl&quot;&gt;removed:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;false&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;file://$MODULE_DIR$/src/[PATH TO SPRING BOOT APP]/[SPRING BOOT APP CLASS].java&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;facetManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;springFacet&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Lastly, still using the node build object, I build another xml element for Infinitest.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Setup Infinitest integration.&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;infinitestFacet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;facet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;type:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Infinitest&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Infinitest&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;facetManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;infinitestFacet&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Both of these produces the final output of:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;module&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;relativePaths=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;JAVA_MODULE&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;4&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;component&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;FacetManager&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;facet&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Spring&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Spring&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;fileset&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fileset&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Spring Application Context&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;removed=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;file&amp;gt;&lt;/span&gt;file://$MODULE_DIR$/src/[PATH TO SPRING BOOT APP]/[SPRING BOOT APP CLASS].java&lt;span class=&quot;nt&quot;&gt;&amp;lt;/file&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/fileset&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/facet&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;facet&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Infinitest&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Infinitest&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/facet&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/component&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/module&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;so-how-do-you-add-your-own-plugin-configurations&quot;&gt;So how do you add your own plugin configurations?&lt;/h4&gt;

&lt;p&gt;I do the following steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Make a copy of your iml or ipr file.&lt;/li&gt;
  &lt;li&gt;In Intellij, modify your settings to exactly what you want.&lt;/li&gt;
  &lt;li&gt;Diff the two and determine what XML elements need to be created.&lt;/li&gt;
  &lt;li&gt;Build the gradle configuration until you get exactly what you want.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;lastly-is-it-worth-the-work&quot;&gt;Lastly: &lt;em&gt;Is it worth the work?&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;If it’s just you, maybe not.  I tend to work with teams of 3 - 15 developers.  A good chunk of them are really great developers and many of them can get stuck trying to get things setup.  Most developers are lazy &lt;a href=&quot;http://c2.com/cgi/wiki?ProgrammingPerl&quot;&gt;(which isn’t always thought of as a bad thing)&lt;/a&gt; and so making things work “auto-magically” will result in the highest rate of adoption and the lowest rate of grumbling.&lt;/p&gt;

&lt;p&gt;I am always open to hear your thoughts though…&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/developer%20setup/Gradle-Intellij-Setup/&quot;&gt;Customize Gradle to setup Intellij&lt;/a&gt; was originally published by Stephen Shary at &lt;a href=&quot;&quot;&gt;STeve Smash Code&lt;/a&gt; on December 24, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Intellij and Gradle Setup and Integration]]></title>
 <link rel="alternate" type="text/html" href="/developer%20setup/Gradle-Intellij/" />
  <id>/developer%20setup/Gradle-Intellij</id>
  <updated>2015-12-23T00:00:00-00:00</updated>
  <published>2015-12-22T00:00:00-05:00</published>
  
  <author>
    <name>Stephen Shary</name>
    <uri></uri>
    <email>stephen.shary@gmail.com`</email>
  </author>
  <content type="html">
    &lt;p&gt;There are two main ways to setup your project in Intellij when using gradle as your build tool for a java project:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Import your gradle project using Intellij.&lt;/li&gt;
  &lt;li&gt;Build your Intellij project using the Gradle idea plugin&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here, I’ll discuss the three approaches and the pros and cons.  The end will talk about I do in the projects that I work on.&lt;/p&gt;

&lt;h2 id=&quot;import-your-gradle-project-using-intellij&quot;&gt;Import your Gradle project Using Intellij&lt;/h2&gt;

&lt;p&gt;Intellij has two big nice features:  “ability to import projects from the existing Gradle models. So doing, IntelliJ IDEA downloads all the necessary dependencies” and “ability to synchronize structures of Gradle and IntelliJ IDEA projects.”  In practice, this is where you open a project by selecting the “build.gradle” file in your project and the Intellij wizard(ry) does the rest.&lt;/p&gt;

&lt;p&gt;Pros:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Very simple.&lt;/li&gt;
  &lt;li&gt;Changes are synchronized.  As you change your &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; file, Intellij will automatically pull the dependency down and add it to your build path.  Make sure that you select the check box as seen below for this feature.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;images/gradle-import.png&quot; alt=&quot;Gradle import window in Intellij&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Cons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Intellij doesn’t import all of your settings.  Specifically, if there are plugin configurations for your project that you use with your &lt;a href=&quot;https://docs.gradle.org/current/userguide/idea_plugin.html&quot;&gt;idea plugin settings&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt;  JetBrains recommends that if you want to share your project settings on your team, that you should “.idea project configuration directory should be shared via version control.” &lt;a href=&quot;https://www.jetbrains.com/idea/help/synchronizing-and-sharing-settings.html#d1421736e270&quot;&gt;Source&lt;/a&gt; &lt;a href=&quot;https://intellij-support.jetbrains.com/hc/en-us/articles/206827587-How-to-manage-projects-under-Version-Control-Systems&quot;&gt;and here&lt;/a&gt; but it contains a number of “guidelines” of things that you should not include because they “contain keystore passwords”, “conflicts if another developer has the same name”.  I have also found when a project has these files checked in ( incorrectly albeit ), that every commit will inevitably contain some .iws change.&lt;/p&gt;

&lt;h2 id=&quot;build-your-intellij-project-using-the-gradle-idea-plugin&quot;&gt;Build your Intellij project using the Gradle idea plugin&lt;/h2&gt;

&lt;p&gt;Gradle has an &lt;em&gt;idea&lt;/em&gt; plugin that allows you to build your Intellij project files.  You just need to include the line:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;idea&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and when you run the command &lt;code class=&quot;highlighter-rouge&quot;&gt;gradlew idea&lt;/code&gt; it will download your dependencies and setup your project.&lt;/p&gt;

&lt;p&gt;Pros:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Very simple to setup dependencies.&lt;/li&gt;
  &lt;li&gt;You can customize project settings including your Version Control, JDK Version, and other plugin settings.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Changes are not automatically synchronized.  You need to run &lt;code class=&quot;highlighter-rouge&quot;&gt;gradlew idea&lt;/code&gt; to rebuild your dependencies.&lt;/li&gt;
  &lt;li&gt;Making custom changes are not simple.  Most of them involve XML manipulation using groovy.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;so-what-did-i-choose&quot;&gt;So What Did I Choose?&lt;/h2&gt;

&lt;p&gt;I chose to use the second option.  I found that even if the setup is harder, it’s worth it to automatically configure more parts of the development environment.  We have strong developers that spend the time to get their environment just right.  But, there are equally more people that will work with less optimal systems because they are unsure how to get it working.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/developer%20setup/Gradle-Intellij/&quot;&gt;Intellij and Gradle Setup and Integration&lt;/a&gt; was originally published by Stephen Shary at &lt;a href=&quot;&quot;&gt;STeve Smash Code&lt;/a&gt; on December 22, 2015.&lt;/p&gt;
  </content>
</entry>

</feed>
